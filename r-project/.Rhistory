### Chart 3
```{r}
## Correlation Plot
# Create correlation matrix
correlation <- cor(df_numeric)
my_colors <- colorRampPalette(c("#8C2C2C", "white", "#2E3F8B"))(200)
corrplot(correlation,
order = 'AOE',
tl.srt =  45,
tl.col = "black",
col =viridis(200, option = "mako")
)
my_colors <- colorRampPalette(c("#8C2C2C", "white", "#2E3F8B"))(200)
corrplot(correlation,
order = 'AOE',
tl.srt =  45,
tl.col = "black",
col =viridis(200, option = "mako")
)
my_colors <- colorRampPalette(c("#8C2C2C", "white", "#2E3F8B"))(200)
corrplot(correlation,
order = 'AOE',
tl.srt =  45,
tl.col = "black",
col =viridis(200, option = "mako")
)
```
my_colors <- colorRampPalette(c("#8C2C2C", "white", "#2E3F8B"))(200)
corrplot(correlation,
order = 'AOE',
tl.srt =  45,
tl.col = "black",
col =viridis(200, option = "mako")
)
```
---
title: "Untitled"
```{r setup, include=FALSE}
library(flexdashboard)
library(flexdashboard)
Column {data-width=650}
library(flexdashboard)
```{r setup, include=FALSE}
library(flexdashboard)
---
title: "Hollywood Movies"
install.packages("wesanderson")
library(wesanderson)
# Colour Palette
wes_palette <- wes_palette("Zissou1", n = 4, type = "continuous")
## Correlation Plot
# Fix variable names
names(df_numeric) <- gsub("\\.", " ", names(df_numeric))
names(df_numeric) <- gsub("\\.+$", "", names(df_numeric))
## Correlation Plot
# Fix variable names
clean_names <- function(name) {
name <- gsub("\\.", " ", name)  # Reemplaza puntos por espacios
name <- gsub("\\s+", " ", name) # Elimina espacios múltiples
name <- gsub("\\.+$", "", name) # Elimina puntos al final
name <- toTitleCase(name)       # Capitaliza cada palabra
return(name)
}
name <- gsub("\\.", " ", name)  # Replace dots by white spaces
name <- gsub("\\s+", " ", name) # Remove white spaces
name <- gsub("\\.+$", "", name) # Remove final dots
name <- toTitleCase(name)       # Capitalize every word
return(name)
## Correlation Plot
# Fix variable names
clean_names <- function(name) {
name <- gsub("\\.", " ", name)  # Replace dots by white spaces
name <- gsub("\\s+", " ", name) # Remove white spaces
name <- gsub("\\.+$", "", name) # Remove final dots
name <- toTitleCase(name)       # Capitalize every word
return(name)
}
names(df_numeric) <- sapply(names(df_numeric), clean_names)
s <- gsub("\\.", " ", s)
s <- gsub("\\s+", " ", s)
s <- gsub("\\.+$", "", s)
s <- tolower(s)
s <- gsub("^(.)|\\s(.)", "\\U\\1\\U\\2", s, perl = TRUE) # Convertir a mayúsculas la primera letra de cada palabra
return(s)
## Correlation Plot
# Fix variable names
# Definir la función completa primero
toTitleCase <- function(s) {
s <- gsub("\\.", " ", s)  # Reemplaza puntos por espacios
s <- gsub("\\s+", " ", s) # Elimina espacios múltiples
s <- gsub("\\s+$", "", s) # Elimina espacios al final de la cadena
s <- tolower(s)           # Convertir a minúsculas
s <- gsub("^(.)|\\s(.)", "\\U\\1\\U\\2", s, perl = TRUE) # Convertir a mayúsculas la primera letra de cada palabra
return(s)
}
# Ahora aplicar la función a los nombres de las columnas
names(df_numeric) <- sapply(names(df_numeric), toTitleCase)
## Correlation Plot
# Fix variable names
# Definir la función completa primero
names(df_numeric) <- gsub("\\.", " ", names(df_numeric))  # Reemplaza puntos por espacios
names(df_numeric) <- gsub("\\.+$", "", names(df_numeric))
# Create correlation matrix
correlation <- cor(df_numeric)
my_colors <- brewer.pal(8, "Blues")
# Libraries
library(tidyverse)
library(dplyr)
# Load data
df <- read.csv("data/HollywoodsMostProfitableStories.csv")
head(df)
# Check data types
names(df)
dim(df)
str(df)
install.packages("ggraph")
library(ggraph)
# Load data
df <- read.csv("data/HollywoodsMostProfitableStories.csv")
head(df)
install.packages("igraph")
library(igraph)
library(igraph)
library(ggraph)
# Load data
df <- read.csv("data/HollywoodsMostProfitableStories.csv")
head(df)
# Crear una tabla de bordes
bordes <- df %>%
select(Film, Genre, Lead.Studio) %>%
group_by(Genre, Lead.Studio) %>%
summarise(Films=n()) %>%
ungroup()
# Crear una tabla de bordes
edges <- df %>%
select(Film, Genre, Lead.Studio) %>%
group_by(Genre, Lead.Studio) %>%
summarise(Films=n()) %>%
ungroup()
library(dplyr)
# Crear una tabla de bordes
edges <- df %>%
select(Film, Genre, Lead.Studio) %>%
group_by(Genre, Lead.Studio) %>%
summarise(Films=n()) %>%
ungroup()
# Crear una tabla de bordes
edges <- df %>%
select(Film, Genre, Lead.Studio) %>%
group_by(Genre, Lead.Studio) %>%
summarise(Films = n(), .groups = 'drop')
# Crear una tabla de nodos para géneros
nodes_genres <- df %>%
distinct(Genre) %>%
mutate(id = Genre)
# Crear una tabla de nodos para estudios
nodes_studios <- df %>%
distinct(Lead.Studio) %>%
mutate(id = Lead.Studio)
# Combinar ambos data frames de nodos
nodes <- bind_rows(nodes_genres, nodes_studios)
# Crear un data frame de bordes para igraph
edges_igraph <- edges %>%
mutate(from = Genre, to = Lead.Studio)
# Crear un objeto igraph
graph <- graph_from_data_frame(d=edges_igraph, vertices=nodes)
# Generar el gráfico de red con ggraph
ggraph(graph) +
geom_edge_link(aes(width = Films), alpha = 0.8) +
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_graph()
# Generar el gráfico de red con ggraph
ggraph(graph, layout = "fr") +
geom_edge_link(aes(width = Films), alpha = 0.8) +
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_graph()
library(tidygraph)
# Generar el gráfico de red con ggraph
ggraph(graph, layout = 'kk') +  # Añade el layout Kamada-Kawai
geom_edge_link(aes(width = Films), alpha = 0.8) +
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE, color = "black") +
theme_graph()
# Load data
df <- read.csv("data/HollywoodsMostProfitableStories.csv")
head(df)
# Crear una tabla de bordes
edges <- df %>%
select(Film, Genre, Lead.Studio) %>%
group_by(Genre, Lead.Studio) %>%
summarise(Films = n(), .groups = 'drop')
# Crear una tabla de nodos para géneros
nodes_genres <- df %>%
distinct(Genre) %>%
mutate(id = Genre)
# Crear una tabla de nodos para estudios
nodes_studios <- df %>%
distinct(Lead.Studio) %>%
mutate(id = Lead.Studio)
# Combinar ambos data frames de nodos
nodes <- bind_rows(nodes_genres, nodes_studios)
# Crear un data frame de bordes para igraph
edges_igraph <- edges %>%
mutate(from = Genre, to = Lead.Studio)
# Crear un objeto igraph
graph <- graph_from_data_frame(d=edges_igraph, vertices=nodes)
# Crear un objeto igraph
graph <- graph_from_data_frame(d=edges_igraph, vertices=nodes)
View(df)
# Preparar el data.frame de bordes
edges <- df %>%
select(Film, Genre, Lead.Studio) %>%
group_by(Genre, Lead.Studio) %>%
summarise(Films = n(), .groups = 'drop')
# Crear nodos para géneros y estudios
nodes_genres <- distinct(df, Genre) %>%
mutate(id = Genre) %>%
select(id)
nodes_studios <- distinct(df, Lead.Studio) %>%
mutate(id = Lead.Studio) %>%
select(id)
# Combinar nodos asegurando que no haya duplicados ni NAs
nodes <- bind_rows(nodes_genres, nodes_studios) %>%
distinct() %>%
mutate(id = ifelse(is.na(id), paste("Node", seq(sum(is.na(id))), sep="_"), id))
# Asegurar que 'from' y 'to' en edges son caracteres y que no hay NA
edges <- edges %>%
mutate(from = as.character(Genre), to = as.character(Lead.Studio)) %>%
select(-Film, -Genre, -Lead.Studio) %>%
filter(!is.na(from) & !is.na(to))
# Asegurar que 'from' y 'to' en edges son caracteres y que no hay NA
edges <- edges %>%
mutate(from = as.character(Genre), to = as.character(Lead.Studio)) %>%
# Se elimina la línea que intenta quitar la columna 'Film', que ya no existe
filter(!is.na(from) & !is.na(to))
# Crear el grafo
grafo <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
# Visualizar el grafo
ggraph(grafo, layout = 'kk') +
geom_edge_link(aes(width = sqrt(Films)), alpha = 0.8) +  # Usar sqrt(Films) para mejorar la visualización
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE, color = "black", size = 3) +
theme_graph()
# Asegurar que 'from' y 'to' en edges son caracteres y que no hay NA
edges <- df %>%
group_by(Genre, Lead.Studio) %>%
summarise(Films = n(), .groups = 'drop') %>%
rename(from = Genre, to = Lead.Studio)
# Crear el grafo
grafo <- graph_from_data_frame(d = edges, directed = FALSE)
# Visualizar el grafo
ggraph(grafo, layout = 'kk') +
geom_edge_link(aes(width = sqrt(Films)), alpha = 0.8) +  # Asegurándose de que 'Films' está presente y correcto
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE, color = "black", size = 3) +
theme_graph()
# Libraries
library(ggplot2)
library(gganimate)
# Load data
df <- read.csv("data/HollywoodsMostProfitableStories.csv")
View(df)
df$Year <- as.factor(df$Year)
# Crear el scatter plot animado
p <- ggplot(df, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {frame_time}', x = 'Audience Score', y = 'Profitability') +
theme_minimal() +
transition_time(Year) +
ease_aes('linear')
# Crear la animación
animate(p, duration = 10, fps = 5, renderer = gifski_renderer())
# Asegurarse de que Year es numérico
df$Year <- as.numeric(as.character(df$Year))
# Crear el scatter plot animado
p <- ggplot(df, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {frame_time}', x = 'Audience Score', y = 'Profitability') +
theme_minimal() +
transition_time(Year) +
ease_aes('linear')
# Crear la animación
animate(p, duration = 10, fps = 5, renderer = gifski_renderer())
# Crear la animación
animate(p,  width = 800, height = 600, duration = 10, fps = 5, renderer = gifski_renderer())
# Crear la animación
animate(p,  width = 800, height = 600, duration = 20, fps = 6, renderer = gifski_renderer())
# Crear el scatter plot animado
p <- ggplot(df, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
plot.title = element_text(family = "merriweather", face = "bold", size = 20),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, vjust = 1, size = 12),
axis.title.y = element_blank()
)
# Crear la animación
animate(p,  width = 800, height = 600, duration = 20, fps = 6, renderer = gifski_renderer())
# Crear el scatter plot animado
p <- ggplot(df, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
plot.title = element_text(family = "merriweather", face = "bold", size = 20),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, vjust = 1, size = 12)
)
# Crear la animación
animate(p,  width = 800, height = 600, duration = 20, fps = 6, renderer = gifski_renderer())
# Crear el scatter plot animado
p <- ggplot(df, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, vjust = 1, size = 12)
)
# Crear la animación
animate(p,  width = 800, height = 600, duration = 20, fps = 6, renderer = gifski_renderer())
warnings()
table(df$Profitability)
df_filtered <- df %>%
filter(Profitability <= 60) %>% # Ajusta el 60 si necesitas un límite diferente
drop_na(Audience..score.., Profitability, Worldwide.Gross, Genre)
df_filtered <- df %>%
filter(Profitability <= 60) %>% # Ajusta el 60 si necesitas un límite diferente
drop_na(Audience..score.., Profitability, Worldwide.Gross, Genre)
# Asegúrate de que Year es numérico para la animación
df_filtered$Year <- as.numeric(as.character(df_filtered$Year))
# Crear el scatter plot animado con el dataframe filtrado
p <- ggplot(df_filtered, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, vjust = 1, size = 12)
)
# Crear la animación
animate(p, width = 800, height = 600, duration = 20, fps = 6, renderer = gifski_renderer())
# Crear el scatter plot animado con el dataframe filtrado
p <- ggplot(df_filtered, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.x = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, vjust = 1, size = 12)
)
# Crear la animación
animate(p, width = 800, height = 600, duration = 20, fps = 6, renderer = gifski_renderer())
# Crear el scatter plot animado con el dataframe filtrado
p <- ggplot(df_filtered, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.x = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18),
axis.title = element_text(face = "bold", size = 14)
axis.text.x = element_text(hjust = 1, vjust = 1, size = 12),
# Crear la animación
animate(p, width = 800, height = 600, duration = 20, fps = 6, renderer = gifski_renderer())
# Crear el scatter plot animado con el dataframe filtrado
p <- ggplot(df_filtered, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.x = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18),
axis.title = element_text(face = "bold", size = 14),
axis.text.x = element_text(hjust = 1, vjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, vjust = 1, size = 12)
)
# Crear la animación
animate(p, width = 800, height = 600, duration = 20, fps = 6, renderer = gifski_renderer())
library(RColorBrewer)
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.x = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_text(face = "bold", size = 14),
axis.text.x = element_text(hjust = 1, vjust = 1, size = 12),
axis.title.y = element_text(face = "bold", size = 14),
axis.text.y = element_text(hjust = 1, vjust = 1, size = 12)
)
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.x = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_text(face = "bold", size = 14),
axis.text.x = element_text(hjust = 1, vjust = 1, size = 12),
axis.title.y = element_text(face = "bold", size = 14),
axis.text.y = element_text(hjust = 1, vjust = 1, size = 12)
)
# Crear el scatter plot animado con el dataframe filtrado
p <- ggplot(df_filtered, aes(x = Audience..score.., y = Profitability, size = Worldwide.Gross, color = Genre)) +
geom_point(alpha = 0.7) +
scale_colour_brewer(palette = "Paired") +
scale_size(range = c(1, 10), name = "Worldwide Gross\n(millions)") +
labs(title = 'Year: {as.integer(frame_time)}', x = 'Audience Score', y = 'Profitability') +
transition_time(Year) +
enter_grow() +
exit_fade() +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.x = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey85", linetype = "dotted"),
panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_text(face = "bold", size = 14),
axis.text.x = element_text(hjust = 1, vjust = 1, size = 12),
axis.title.y = element_text(face = "bold", size = 14),
axis.text.y = element_text(hjust = 1, vjust = 1, size = 12)
)
# Crear la animación
animate(p, width = 800, height = 600, duration = 20, fps = 6, renderer = gifski_renderer())
# Crear la animación
animate(p, width = 800, height = 600, duration = 20, fps = 5, renderer = gifski_renderer())
